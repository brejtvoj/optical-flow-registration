import numpy as np
import torch

from smooth_loss import smooth_loss_sequential
from ssim_loss import multiscale_ssim_loss
from census_loss import multiscale_census_loss
from sequence_loss import sequence_loss


def multiloss_weights(step, total_steps=100000, break_point=0.3):
    """
    Return scalar weights for each of the losses in the given point of the training.

    Parameters
    ----------
    step : int
        Number of the iteration.
    total_steps : int
        Total number of iterations.
    break_point : float
        Determin, where the sequentiall loss starts decreasing more rapidly.

    Returns
    -------
    w_ssim : float
        SSIM weight.
    w_census : float
        Census weight.
    w_smooth : float
        Smooth weight.
    w_sq : float
        Sequential weight.

    """
    break_point = int(total_steps * break_point)
    w_ssim = 1.0 / (1.0 + np.exp(-0.0004 * (step - break_point)))
    w_census = 2.0 * w_ssim
    w_smooth = 0.1 * w_census
    w_sq = 1.0 / (1.0 + np.exp(0.001 * (step - break_point)))
    return w_ssim, w_census, w_smooth, w_sq


def multi_loss(step, image1, image2, flow_preds, flow_gt, valid, mask=None):
    """
    Calculate individual losses and assignent them the correct weights.

    Parameters
    ----------
    step : int
        Current number of iterations.
    image1 : Tensor
        Original image.
    image2 : Tensor
        Target image.
    flow_preds : list of Tensors
        List of individual flow updates.
    flow_gt : Tensor
        Ground truth optical flow.
    valid : Tensor
        Mask generated from the flow magnitude.
    mask : Tensor
        Foreground mask generated by segmentation.

    Returns
    -------
    loss : Tensor
        Sum of all losses multiplied by their individuall losses.

    """
    l_seq = sequence_loss(flow_preds, flow_gt, valid)
    l_smo = smooth_loss_sequential(flow_preds, mask)
    l_cen = multiscale_census_loss(image1, image2, flow_preds[-1])
    l_ssim = multiscale_ssim_loss(image1, image2, flow_preds[-1])

    w_ssim, w_census, w_smooth, w_sq = multiloss_weights(step)

    loss = w_ssim * l_ssim + w_census * l_cen + w_smooth * l_smo + w_sq * l_seq

    return loss